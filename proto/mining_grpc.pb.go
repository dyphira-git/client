// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: proto/mining.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MiningService_GetBlockTemplate_FullMethodName       = "/mining.MiningService/GetBlockTemplate"
	MiningService_SubmitBlock_FullMethodName            = "/mining.MiningService/SubmitBlock"
	MiningService_GetBlockchainStatus_FullMethodName    = "/mining.MiningService/GetBlockchainStatus"
	MiningService_GetPendingTransactions_FullMethodName = "/mining.MiningService/GetPendingTransactions"
)

// MiningServiceClient is the client API for MiningService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Mining service definition
type MiningServiceClient interface {
	// Get a block template for mining
	GetBlockTemplate(ctx context.Context, in *BlockTemplateRequest, opts ...grpc.CallOption) (*BlockTemplateResponse, error)
	// Submit a mined block
	SubmitBlock(ctx context.Context, in *SubmitBlockRequest, opts ...grpc.CallOption) (*SubmitBlockResponse, error)
	// Get current blockchain status
	GetBlockchainStatus(ctx context.Context, in *BlockchainStatusRequest, opts ...grpc.CallOption) (*BlockchainStatusResponse, error)
	// Get pending transactions
	GetPendingTransactions(ctx context.Context, in *PendingTransactionsRequest, opts ...grpc.CallOption) (*PendingTransactionsResponse, error)
}

type miningServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMiningServiceClient(cc grpc.ClientConnInterface) MiningServiceClient {
	return &miningServiceClient{cc}
}

func (c *miningServiceClient) GetBlockTemplate(ctx context.Context, in *BlockTemplateRequest, opts ...grpc.CallOption) (*BlockTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockTemplateResponse)
	err := c.cc.Invoke(ctx, MiningService_GetBlockTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miningServiceClient) SubmitBlock(ctx context.Context, in *SubmitBlockRequest, opts ...grpc.CallOption) (*SubmitBlockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitBlockResponse)
	err := c.cc.Invoke(ctx, MiningService_SubmitBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miningServiceClient) GetBlockchainStatus(ctx context.Context, in *BlockchainStatusRequest, opts ...grpc.CallOption) (*BlockchainStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockchainStatusResponse)
	err := c.cc.Invoke(ctx, MiningService_GetBlockchainStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miningServiceClient) GetPendingTransactions(ctx context.Context, in *PendingTransactionsRequest, opts ...grpc.CallOption) (*PendingTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PendingTransactionsResponse)
	err := c.cc.Invoke(ctx, MiningService_GetPendingTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiningServiceServer is the server API for MiningService service.
// All implementations must embed UnimplementedMiningServiceServer
// for forward compatibility.
//
// Mining service definition
type MiningServiceServer interface {
	// Get a block template for mining
	GetBlockTemplate(context.Context, *BlockTemplateRequest) (*BlockTemplateResponse, error)
	// Submit a mined block
	SubmitBlock(context.Context, *SubmitBlockRequest) (*SubmitBlockResponse, error)
	// Get current blockchain status
	GetBlockchainStatus(context.Context, *BlockchainStatusRequest) (*BlockchainStatusResponse, error)
	// Get pending transactions
	GetPendingTransactions(context.Context, *PendingTransactionsRequest) (*PendingTransactionsResponse, error)
	mustEmbedUnimplementedMiningServiceServer()
}

// UnimplementedMiningServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMiningServiceServer struct{}

func (UnimplementedMiningServiceServer) GetBlockTemplate(context.Context, *BlockTemplateRequest) (*BlockTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockTemplate not implemented")
}
func (UnimplementedMiningServiceServer) SubmitBlock(context.Context, *SubmitBlockRequest) (*SubmitBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitBlock not implemented")
}
func (UnimplementedMiningServiceServer) GetBlockchainStatus(context.Context, *BlockchainStatusRequest) (*BlockchainStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockchainStatus not implemented")
}
func (UnimplementedMiningServiceServer) GetPendingTransactions(context.Context, *PendingTransactionsRequest) (*PendingTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingTransactions not implemented")
}
func (UnimplementedMiningServiceServer) mustEmbedUnimplementedMiningServiceServer() {}
func (UnimplementedMiningServiceServer) testEmbeddedByValue()                       {}

// UnsafeMiningServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiningServiceServer will
// result in compilation errors.
type UnsafeMiningServiceServer interface {
	mustEmbedUnimplementedMiningServiceServer()
}

func RegisterMiningServiceServer(s grpc.ServiceRegistrar, srv MiningServiceServer) {
	// If the following call pancis, it indicates UnimplementedMiningServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MiningService_ServiceDesc, srv)
}

func _MiningService_GetBlockTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiningServiceServer).GetBlockTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiningService_GetBlockTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiningServiceServer).GetBlockTemplate(ctx, req.(*BlockTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiningService_SubmitBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiningServiceServer).SubmitBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiningService_SubmitBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiningServiceServer).SubmitBlock(ctx, req.(*SubmitBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiningService_GetBlockchainStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockchainStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiningServiceServer).GetBlockchainStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiningService_GetBlockchainStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiningServiceServer).GetBlockchainStatus(ctx, req.(*BlockchainStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiningService_GetPendingTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PendingTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiningServiceServer).GetPendingTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiningService_GetPendingTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiningServiceServer).GetPendingTransactions(ctx, req.(*PendingTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MiningService_ServiceDesc is the grpc.ServiceDesc for MiningService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MiningService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mining.MiningService",
	HandlerType: (*MiningServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlockTemplate",
			Handler:    _MiningService_GetBlockTemplate_Handler,
		},
		{
			MethodName: "SubmitBlock",
			Handler:    _MiningService_SubmitBlock_Handler,
		},
		{
			MethodName: "GetBlockchainStatus",
			Handler:    _MiningService_GetBlockchainStatus_Handler,
		},
		{
			MethodName: "GetPendingTransactions",
			Handler:    _MiningService_GetPendingTransactions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/mining.proto",
}
